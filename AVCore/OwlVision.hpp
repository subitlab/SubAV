///
/// \file      OwlVision.hpp
/// \brief     SubIT standalone image type.
/// \details   I mean, since JPEG uses YUV420p then why we still convert it to RGB on CPU side.
///            This texture format is a solution to that problem.
/// \author    HenryDu
/// \date      10.11.2024
/// \copyright Â© HenryDu 2024. All right reserved.
///
#pragma once

#include <cstdint>
#include <cstddef>
#include <iosfwd>

namespace SubIT {

    class SbOwlVisionConstants {
    public:
        static constexpr float QM4x4[2][16] = { {
                10, 11, 26, 40, 
                12, 16, 42, 47, 
                18, 37, 64, 68, 
                49, 63, 77, 75, 
            }, {
                13, 29, 70, 70, 
                29, 62, 70, 70, 
                70, 70, 70, 70, 
                70, 70, 70, 70,
            }
        };
        static constexpr float QM8x8[2][64] = {{
                16, 11, 10, 16, 24, 40, 51, 61,
                12, 12, 14, 19, 26, 58, 60, 55,
                14, 13, 16, 24, 40, 57, 69, 56,
                14, 17, 22, 29, 51, 87, 80, 62,
                18, 22, 37, 56, 68, 109, 103, 77,
                24, 35, 55, 64, 81, 104, 113, 92,
                49, 64, 78, 87, 103, 121, 120, 101,
                72, 92, 95, 98, 112, 100, 103, 99
            }, {
                17, 18, 24, 47, 99, 99, 99, 99,
                18, 21, 26, 66, 99, 99, 99, 99,
                24, 26, 56, 99, 99, 99, 99, 99,
                47, 66, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99
            }
        };
        static constexpr float QM16x16[2][256] = { {
                16, 16, 11, 11, 10, 10, 16, 16, 24,  24,  40,  40,  51,  51,  61,  61,
                16, 16, 11, 11, 10, 10, 16, 16, 24,  24,  40,  40,  51,  51,  61,  61,
                12, 12, 12, 12, 14, 14, 19, 19, 26,  26,  58,  58,  60,  60,  55,  55,
                12, 12, 12, 12, 14, 14, 19, 19, 26,  26,  58,  58,  60,  60,  55,  55,
                14, 14, 13, 13, 16, 16, 24, 24, 40,  40,  57,  57,  69,  69,  56,  56,
                14, 14, 13, 13, 16, 16, 24, 24, 40,  40,  57,  57,  69,  69,  56,  56,
                14, 14, 17, 17, 22, 22, 29, 29, 51,  51,  87,  87,  80,  80,  62,  62,
                14, 14, 17, 17, 22, 22, 29, 29, 51,  51,  87,  87,  80,  80,  62,  62,
                18, 18, 22, 22, 37, 37, 56, 56, 68,  68,  109, 109, 103, 103, 77,  77,
                18, 18, 22, 22, 37, 37, 56, 56, 68,  68,  109, 109, 103, 103, 77,  77,
                24, 24, 35, 35, 55, 55, 64, 64, 81,  81,  104, 104, 113, 113, 92,  92,
                24, 24, 35, 35, 55, 55, 64, 64, 81,  81,  104, 104, 113, 113, 92,  92,
                49, 49, 64, 64, 78, 78, 87, 87, 103, 103, 121, 121, 120, 120, 101, 101,
                49, 49, 64, 64, 78, 78, 87, 87, 103, 103, 121, 121, 120, 120, 101, 101,
                72, 72, 92, 92, 95, 95, 98, 98, 112, 112, 100, 100, 103, 103, 99,  99,
                72, 72, 92, 92, 95, 95, 98, 98, 112, 112, 100, 100, 103, 103, 99,  99,
            },
            {
                17, 17, 18, 18, 24, 24, 47, 47, 99, 99, 99, 99, 99, 99, 99, 99,
                17, 17, 18, 18, 24, 24, 47, 47, 99, 99, 99, 99, 99, 99, 99, 99,
                18, 18, 21, 21, 26, 26, 66, 66, 99, 99, 99, 99, 99, 99, 99, 99,
                18, 18, 21, 21, 26, 26, 66, 66, 99, 99, 99, 99, 99, 99, 99, 99,
                24, 24, 26, 26, 56, 56, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                24, 24, 26, 26, 56, 56, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                47, 47, 66, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                47, 47, 66, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
            }
        };
        // Stick to this for now, we don't sure if there will have problems in the future, but this is the best for now.
        static constexpr float QM32x32[2][1024] = {{
                40,24,18,18, 11,11,11,11, 10,10,10,10, 16,16,16,16, 24,24,24,24, 40,40,40,40, 51,51,51,51, 61,61,61,61,
                24,16,16,16, 11,11,11,11, 10,10,10,10, 16,16,16,16, 24,24,24,24, 40,40,40,40, 51,51,51,51, 61,61,61,61,
                24,16,16,16, 11,11,11,11, 10,10,10,10, 16,16,16,16, 24,24,24,24, 40,40,40,40, 51,51,51,51, 61,61,61,61,
                24,16,16,16, 11,11,11,11, 10,10,10,10, 16,16,16,16, 24,24,24,24, 40,40,40,40, 51,51,51,51, 61,61,61,61,
            
                12,12,12,12, 12,12,12,12, 14,14,14,14, 19,19,19,19, 26,26,26,26, 58,58,58,58, 60,60,60,60, 55,55,55,55,
                12,12,12,12, 12,12,12,12, 14,14,14,14, 19,19,19,19, 26,26,26,26, 58,58,58,58, 60,60,60,60, 55,55,55,55,
                12,12,12,12, 12,12,12,12, 14,14,14,14, 19,19,19,19, 26,26,26,26, 58,58,58,58, 60,60,60,60, 55,55,55,55,
                12,12,12,12, 12,12,12,12, 14,14,14,14, 19,19,19,19, 26,26,26,26, 58,58,58,58, 60,60,60,60, 55,55,55,55,
                
                14,14,14,14, 13,13,13,13, 16,16,16,16, 24,24,24,24, 40,40,40,40, 57,57,57,57, 69,69,69,69, 56,56,56,56,
                14,14,14,14, 13,13,13,13, 16,16,16,16, 24,24,24,24, 40,40,40,40, 57,57,57,57, 69,69,69,69, 56,56,56,56,
                14,14,14,14, 13,13,13,13, 16,16,16,16, 24,24,24,24, 40,40,40,40, 57,57,57,57, 69,69,69,69, 56,56,56,56,
                14,14,14,14, 13,13,13,13, 16,16,16,16, 24,24,24,24, 40,40,40,40, 57,57,57,57, 69,69,69,69, 56,56,56,56,
            
                14,14,14,14, 17,17,17,17, 22,22,22,22, 29,29,29,29, 51,51,51,51, 87,87,87,87, 80,80,80,80, 62,62,62,62,
                14,14,14,14, 17,17,17,17, 22,22,22,22, 29,29,29,29, 51,51,51,51, 87,87,87,87, 80,80,80,80, 62,62,62,62,
                14,14,14,14, 17,17,17,17, 22,22,22,22, 29,29,29,29, 51,51,51,51, 87,87,87,87, 80,80,80,80, 62,62,62,62,
                14,14,14,14, 17,17,17,17, 22,22,22,22, 29,29,29,29, 51,51,51,51, 87,87,87,87, 80,80,80,80, 62,62,62,62,
                
                18,18,18,18, 22,22,22,22, 37,37,37,37, 56,56,56,56, 68,68,68,68, 109,109,109,109, 103,103,103,103, 77,77,77,77,
                18,18,18,18, 22,22,22,22, 37,37,37,37, 56,56,56,56, 68,68,68,68, 109,109,109,109, 103,103,103,103, 77,77,77,77,
                18,18,18,18, 22,22,22,22, 37,37,37,37, 56,56,56,56, 68,68,68,68, 109,109,109,109, 103,103,103,103, 77,77,77,77,
                18,18,18,18, 22,22,22,22, 37,37,37,37, 56,56,56,56, 68,68,68,68, 109,109,109,109, 103,103,103,103, 77,77,77,77,
                
                24,24,24,24, 35,35,35,35, 55,55,55,55, 64,64,64,64, 81,81,81,81, 104,104,104,104, 113,113,113,113, 92,92,92,92,
                24,24,24,24, 35,35,35,35, 55,55,55,55, 64,64,64,64, 81,81,81,81, 104,104,104,104, 113,113,113,113, 92,92,92,92,
                24,24,24,24, 35,35,35,35, 55,55,55,55, 64,64,64,64, 81,81,81,81, 104,104,104,104, 113,113,113,113, 92,92,92,92,
                24,24,24,24, 35,35,35,35, 55,55,55,55, 64,64,64,64, 81,81,81,81, 104,104,104,104, 113,113,113,113, 92,92,92,92,
                
                49,49,49,49, 64,64,64,64, 78,78,78,78, 87,87,87,87, 103,103,103,103, 121,121,121,121, 120,120,120,120, 101,101,101,101,
                49,49,49,49, 64,64,64,64, 78,78,78,78, 87,87,87,87, 103,103,103,103, 121,121,121,121, 120,120,120,120, 101,101,101,101,
                49,49,49,49, 64,64,64,64, 78,78,78,78, 87,87,87,87, 103,103,103,103, 121,121,121,121, 120,120,120,120, 101,101,101,101,
                49,49,49,49, 64,64,64,64, 78,78,78,78, 87,87,87,87, 103,103,103,103, 121,121,121,121, 120,120,120,120, 101,101,101,101,
                
                72,72,72,72, 92,92,92,92, 95,95,95,95, 98,98,98,98, 112,112,112,112, 100,100,100,100, 103,103,103,103, 99,99,99,99,
                72,72,72,72, 92,92,92,92, 95,95,95,95, 98,98,98,98, 112,112,112,112, 100,100,100,100, 103,103,103,103, 99,99,99,99,
                72,72,72,72, 92,92,92,92, 95,95,95,95, 98,98,98,98, 112,112,112,112, 100,100,100,100, 103,103,103,103, 99,99,99,99,
                72,72,72,72, 92,92,92,92, 95,95,95,95, 98,98,98,98, 112,112,112,112, 100,100,100,100, 103,103,103,103, 99,99,99,99
            }, {
                17,17,17,17, 18,18,18,18, 24,24,24,24, 47,47,47,47, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                17,17,17,17, 18,18,18,18, 24,24,24,24, 47,47,47,47, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                17,17,17,17, 18,18,18,18, 24,24,24,24, 47,47,47,47, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                17,17,17,17, 18,18,18,18, 24,24,24,24, 47,47,47,47, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                
                18,18,18,18, 21,21,21,21, 26,26,26,26, 66,66,66,66, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                18,18,18,18, 21,21,21,21, 26,26,26,26, 66,66,66,66, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                18,18,18,18, 21,21,21,21, 26,26,26,26, 66,66,66,66, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                18,18,18,18, 21,21,21,21, 26,26,26,26, 66,66,66,66, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                
                24,24,24,24, 26,26,26,26, 56,56,56,56, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                24,24,24,24, 26,26,26,26, 56,56,56,56, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                24,24,24,24, 26,26,26,26, 56,56,56,56, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                24,24,24,24, 26,26,26,26, 56,56,56,56, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                
                47,47,47,47, 66,66,66,66, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                47,47,47,47, 66,66,66,66, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                47,47,47,47, 66,66,66,66, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                47,47,47,47, 66,66,66,66, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,                
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,                
                99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99, 99,99,99,99,                
            }
        };
    };
    
    //==============================================
    // This class is the core part of SubAV
    //==============================================
    class SbOwlVisionCoreImage {
    public:
        // For method mode selection
        enum PlaneType : uint8_t { Luma = 0, ChromaBlue = 1, ChromaRed = 2 };

        size_t    width;
        size_t    height;
        uint8_t  *data;
        float    *shadow; // Shadow is only used for doing (un)compression, so we will not deep-copy it.
        
        // You should manage memory allocation your self, which means constructor won't allocate and destructor won't free memory.
        // However, this class provided a function to help you allocate image quickly.
        SbOwlVisionCoreImage() = default;
        SbOwlVisionCoreImage(size_t w, size_t h);
        SbOwlVisionCoreImage(const SbOwlVisionCoreImage&);
        SbOwlVisionCoreImage(SbOwlVisionCoreImage&&) noexcept;
        SbOwlVisionCoreImage& operator=(const SbOwlVisionCoreImage&) = default;
        SbOwlVisionCoreImage& operator=(SbOwlVisionCoreImage&&)      = default;
        ~SbOwlVisionCoreImage() = default;

        // ============================================================================
        //  This is a restriction that raw image's width and height is divisible by 8.
        // ============================================================================
        bool       SatisfyRestriction() const;
        size_t     size()               const;

        // Manage memory by yourself, data and shadow are together.
        void       Allocate(void*(*alloc)(size_t size));
        void       Deallocate(void(dealloc)(void*));

        struct ShadowOperationPipelineInfo {
            size_t size;
            size_t offset;
            size_t width;
            size_t height;
            size_t id;
        };
        
        void InitShadowOperationPipelineInfo(PlaneType p, ShadowOperationPipelineInfo* pi) const;
        
        // Shadow operation pipeline stages.
        template <bool dir> void ShadowReceieveData(const ShadowOperationPipelineInfo& pi);
        template <bool dir> void ShadowTransformAndQuantize(const ShadowOperationPipelineInfo& pi);
        template <bool dir> void ShadowReturnData(const ShadowOperationPipelineInfo& pi);

    };

    //========================================================
    //        SUB AV "OVC" file description
    //========================================================
    //    Bytes     |  Description  |     Value              |
    //==============|===============|=========================
    //    [0,7)     |    Header     |  "SBAV-OVC"            |
    //==============|===============|=========================
    //    [7,15)    |    Width      |  64 bit little endian  |
    //==============|===============|=========================
    //    [15,23)   |    Height     |  64 bit little endian  |
    //==============|===============|=========================
    //    [23,31)   | Bits Encoded  |  64 bit little endian  |
    //==============|===============|=========================
    //    [31,32)   | Table Size(N) |   8 bit                |
    //==============|===============|=========================
    //   [32,32+N)  |  Table Data   |   byte array           |
    //==============|===============|=========================
    //  [32+N,EOF)  | Encoded Bits  |  bit stream big endian |
    //==============|===============|=========================
    //        Class implemented all above.
    //========================================================
    class SbOwlVisionContainer {
    public:
        // Just bind the image you want to operate on this, and you can start reading or writing it.
        SbOwlVisionCoreImage* image;
        // Compressed input and output, results would be stored inside image.
        
        // We assume there are no data inside image.
        void operator()(std::istream* in, void*(*alloc)(size_t));
        // We assume there already have data inside image.
        void operator()(std::ostream* out, void*(*alloc)(size_t));
    };

}
